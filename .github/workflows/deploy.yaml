name: Deploy to prod
on:
  workflow_run:
    workflows: ["Build and test"]
    types: [completed]
    branches: [main]
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  # `run_number` increments with each workflow run. It does not
  # increment if we re-run a workflow.
  #
  # `run_attempt` counts the number of times this workflow has been
  # re-run.
  VERSION: ${{ github.run_number }}.${{ github.run_attempt }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend-prod:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/frontend-prod:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/frontend-prod:buildcache,mode=max
          build-args: |
            DOMAIN=${{ secrets.DOMAIN }}
            VERSION=$VERSION
            INTERNAL_BACKEND_HOST=forum_backend
            OTLP_HOST=${{ secrets.OTLP_HOST }}
            OTLP_TOKEN=${{ secrets.OTLP_TOKEN }}
            VITE_API_HOST=http://forum_backend/api/
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend-prod:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backend-prod:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backend-prod:buildcache,mode=max
      - name: Prepare files for deploy
        run: |
          envsubst '$DOCKERHUB_USERNAME' < stack.yaml.template > stack.yaml

          cp .env.example .env.prod
          cat >> .env.prod <<EOF
          DEBUG=
          DEFAULT_AUTHOR_EMAIL=${{ secrets.PRIMARY_EMAIL }}
          DOMAIN=${{ secrets.DOMAIN }}
          VERSION=$VERSION
          DJANGO_SETTINGS_MODULE=forum.settings
          SQL_DATABASE=${{ secrets.SQL_DATABASE }}
          SQL_USER=${{ secrets.SQL_USER }}
          SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}
          SQL_HOST=${{ secrets.SQL_HOST }}
          SQL_PORT=${{ secrets.SQL_PORT }}
          OTLP_HOST=${{ secrets.OTLP_HOST }}
          OTLP_TOKEN=${{ secrets.OTLP_TOKEN }}
          EOF

          mkdir -p server_files
          mv stack.yaml server_files
          mv .env.prod server_files/.env
      - name: Copy needed files to prod server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PROD_IP }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "server_files/stack.yaml,server_files/.env"
          target: /home/${{ secrets.PROD_USERNAME }}/app/
          strip_components: 1
      - name: Deploy updates to prod
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_IP }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /home/${{ secrets.PROD_USERNAME }}/app/

            sudo docker stack deploy forum -c stack.yaml
            sudo docker service update --image ${{ secrets.DOCKERHUB_USERNAME }}/backend-prod forum_backend
            sudo docker service update --image ${{ secrets.DOCKERHUB_USERNAME }}/frontend-prod forum_frontend

            backend=$(sudo docker ps --filter name=forum_backend --format '{{.ID}}' | head -1)

            if [ -z $backend ]; then
              echo "Backend failed to start."
              exit 1
            fi

            sudo docker exec $backend python manage.py migrate
      - name: Announce version
        run: echo "Deployed forum $VERSION"
